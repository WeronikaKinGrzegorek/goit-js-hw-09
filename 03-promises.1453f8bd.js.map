{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAAmBH,SAASC,cAAc,mBAGhD,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAdcN,SAASC,cAAc,yBAkB/Ba,iBAAiB,SAE9B,SAAqBC,GACnBA,EAAMC,iBAMN,IAJA,IAAIC,EAAQC,SAASnB,EAAWoB,OAC1BC,EAAOF,SAAShB,EAAUiB,OAC1BE,EAASH,SAASf,EAAiBgB,OAEhCG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAElClB,EADekB,EAAI,EACKL,GACrBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBT,EAAA4B,OAAOC,QAAQ,qBAAoCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,MAAK,CAC5DsB,cAAc,G,IAGjBC,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBT,EAAA4B,OAAOK,QAAQ,oBAAmCH,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,MAAK,CAC3DsB,cAAc,G,IAGpBX,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst delayStep = document.querySelector('[name=\"step\"]');\nconst amountOfPromises = document.querySelector('[name=\"amount\"]');\nconst submitButton = document.querySelector('button[type=\"submit\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nsubmitButton.addEventListener('click', handleClick);\n\nfunction handleClick(event) {\n  event.preventDefault();\n\n  let delay = parseInt(firstDelay.value);\n  const step = parseInt(delayStep.value);\n  const amount = parseInt(amountOfPromises.value);\n\n  for (let i = 0; i < amount; i += 1) {\n    let position = i + 1;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n        });\n      });\n    delay += step;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amountOfPromises","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","i","then","param","Notify","success","concat","clickToClose","catch","failure"],"version":3,"file":"03-promises.1453f8bd.js.map"}